Change division to match Python 3 semantics.

From: Tom Rothamel <tom@rothamel.us>


---
 jnius/jnius_conversion.pxi |   22 +++++++++++-----------
 1 file changed, 11 insertions(+), 11 deletions(-)

diff --git a/jnius/jnius_conversion.pxi b/jnius/jnius_conversion.pxi
index 2e0b48d..d9fb0cd 100644
--- a/jnius/jnius_conversion.pxi
+++ b/jnius/jnius_conversion.pxi
@@ -112,13 +112,13 @@ cdef void populate_args(JNIEnv *j_env, tuple definition_args, jvalue *j_args, ar
 
             # lambda or function
             elif callable(py_arg):
-                
+
                 # we need to make a java object in python
                 py_arg = convert_python_callable_to_jobject(argtype, py_arg)
 
-                # TODO: this line should not be needed to prevent py_arg from being GCd 
+                # TODO: this line should not be needed to prevent py_arg from being GCd
                 activeLambdaJavaProxies.add(py_arg)
-                
+
                 # next few lines is from "isinstance(py_arg, PythonJavaClass)" above
                 # except jc is None is removed, as we know it has been called by
                 # convert_python_callable_to_jobject()
@@ -399,7 +399,7 @@ def get_param_signature(m):
     return rtr
 
 def convert_python_callable_to_jobject(definition, pyarg):
-    
+
     objmethods = set(["equals", "notify", "notifyAll", "toString", "wait", "getClass"])
     # we assume that definition is java/util/function/Function
     # definition = "Ljava/util/function/Function;"
@@ -411,7 +411,7 @@ def convert_python_callable_to_jobject(definition, pyarg):
 
     if not clz.isInterface():
         raise JavaException('%s is not an interface that can be instantiated with a callable' % classname)
-    
+
     # A functional interface is an interface that has just one
     # abstract method (aside from the methods of Object)
     # https://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.8
@@ -427,16 +427,16 @@ def convert_python_callable_to_jobject(definition, pyarg):
             continue
         # ignore methods that are in Object
         if m.getName() in objmethods:
-            continue        
+            continue
         candidateFunctionalMethods.append(m)
     if len(candidateFunctionalMethods) != 1:
-        raise JavaException("%s is not a functional interface (%d methods) that can be instantiated with a callable: %s" 
+        raise JavaException("%s is not a functional interface (%d methods) that can be instantiated with a callable: %s"
             % (classname, len(candidateFunctionalMethods), str(list(map(lambda m : m.getName(), candidateFunctionalMethods )))))
-    
+
     # functional method has been identified
     functionalMethod = candidateFunctionalMethods[0]
     functionalMethodName = functionalMethod.getName()
-    
+
     # we need a new Python class that will implement the correct interface
     class PythonLambdaArg(PythonJavaClass):
         __javainterfaces__ = [classname]
@@ -449,7 +449,7 @@ def convert_python_callable_to_jobject(definition, pyarg):
 
     # finally add the method to the instance. we use the same name
     setattr(intfInstance, functionalMethodName, pyarg)
-    
+
     # we have added a method after __init__ () was called
     # so we need to re-run introspection
     intfInstance._init_j_self_ptr()
@@ -606,7 +606,7 @@ cdef jstring convert_pystr_to_java(JNIEnv *j_env, unicode py_uni) except NULL:
     py_bytes = py_uni.encode('utf-16')
     # skip byte-order mark
     buff = (<char *>py_bytes) + sizeof(jchar)
-    j_strlen = int(len(py_bytes) / sizeof(jchar) - 1)
+    j_strlen = int(len(py_bytes) // sizeof(jchar) - 1)
     j_str = j_env[0].NewString(j_env, <jchar *>buff, j_strlen)
 
     if j_str == NULL:
